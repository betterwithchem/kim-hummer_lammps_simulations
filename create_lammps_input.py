#!/bin/env python3

# script to generate an input file for lammps
# using the Kim-Hummer potential (JMB, 2008) as implemented by
# Dignon et al. (PLOS Comp Bio, 2018) and Das et al. (PNAS, 2020)

# interaction between disordered chains uses model-D (e0=-1.67 kbT, lambda=0.228)
# interaction involving folded domains uses model-A (e0=-2.27 kbT, lambda=0.159)

############## TO DO #############
# - Check/modify the parameters for the minimization
##################################

import sys
import argparse
from random import randint

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, epilog=" ")

parser.add_argument("-f", dest="conffile",required=True, type=str, help="data file of the starting configuration.")
parser.add_argument("-coeffs", dest="pair_coeffs_data", required=True, type=str, help="Name of the file with the pair coefficients for the non-bonded interactions.")
parser.add_argument("-o", dest="lammps_inputfile", required=False, type=str, help="Name of the generated LAMMPS input file.")
parser.add_argument("-log", dest="lammps_log_file", required=False, type=str, default="lmp.log", help="Name of the log file generated by the simulation" )
parser.add_argument("-dcd", dest="lammps_dcd_file", required=False, type=str, default="lmp.dcd", help="Name of the dcd trajectory file generated by the simulation " )

parser.add_argument("-temp", dest="temperature", required=False, type=float, default=300, help="Temperature of the simulation in K")
parser.add_argument("-nsteps", dest="nsteps", required=False, type=int, default=1000, help="Number of integration steps")

parser.add_argument("-rigid", dest="rigid", required=False, type=str, help="include file name with the rigid body commands")

parser.add_argument("-deffnm", dest="deffnm", required=False, type=str, help="use a single name for .in, .log, and .dcd files. It ovverrides any -o, -log, and -dcd inputs.")

args	=	parser.parse_args()

############### SANITY CHECKS OF THE INPUT COMMAND ##################

error_state=False
if args.deffnm is None:
    if args.lammps_inputfile is None:
        print("Error! you have not define neither -deffnm nor -o arguments!")
        error_state=True
    elif args.lammps_log_file is None:
        print("Error! you have not define neither -deffnm nor -log arguments!")
        error_state=True
    elif args.lammps_dcd_file is None:
        print("Error! you have not define neither -deffnm nor -dcd arguments!")
        error_state=True
        
if error_state:
    sys.exit(1)


#####################################################################



######### PRINT THE COMMAND LINE USED TO GENERATE THE LAMMPS INPUT ###########

if args.deffnm is not None:
    lammps_f=open(args.deffnm+'.in','w')
else:
    lammps_f=open(args.lammps_inputfile,'w')
lammps_f.write('# This LAMMPS input file has been generated with the following command line:\n')
lammps_f.write("# ")
for i in range(len(sys.argv)):
    lammps_f.write("%s " % (sys.argv[i]))
lammps_f.write("\n\n")

##############################################################################

######### Initialization part of the LAMMPS input file

lammps_f.write("units\treal\t# fs, kcal/mol, A, K, Da\n")
# ^: units used in lammps. real -> mass=gram/mol; distance=A; time=fs; energy=kcal/mol; temp=K; P=atm

lammps_f.write("atom_style\tfull\t# molecular+charge\n")
# ^: features of the particles

lammps_f.write("boundary\tp p p\t# pbc in xyz\n")
# ^: periodic boundary conditions in x y z

if args.deffnm is not None:
    lammps_f.write("log\t\t%s.log\n" % (args.deffnm))
else:
    lammps_f.write("log\t\t%s\n" % (args.lammps_log_file))
# ^: name of the log file of the simulation

lammps_f.write("variable\tlangevinDamping equal 1000\n")	# 1 ps^-1 -> 0.001 fs^-1 -> 1000 fs
# ^: define the value of the Langevin dumping coefficient

lammps_f.write("variable\tnstlog equal 1000\n")
lammps_f.write("variable\tdt equal 10\n")
# ^: define the value of the timestep in real units (fs)

if args.deffnm is not None:
    lammps_f.write("variable\tdumpFile\tstring %s.dcd\n" % (args.deffnm))
else:
    lammps_f.write("variable\tdumpFile\tstring %s\n" % (args.lammps_dcd_file))
# ^: define the name of the output trajectory file

lammps_f.write("variable\tlangSeed equal %d\n" % (randint(0,1e7)))
# ^: define the seed for the langevin equation. 

lammps_f.write("variable\tnsteps equal %d\n" % (args.nsteps))
lammps_f.write("\n")

lammps_f.write("print \"Seed:${langSeed}\"\n\n")
# ^: print to screen the value of the langevin seed (for reproducibility of the md run)

lammps_f.write("####Atom and groups definition\n")
lammps_f.write("##############################\n\n")

lammps_f.write("bond_style\tharmonic\n\n")
# ^: bonds are harmonic

lammps_f.write("special_bonds\tlj 0.0 1.0 1.0 coul 0.0 1.0 1.0\n")
# ^: include 1-3 and 1-4 non-bonded interactions

lammps_f.write("pair_style\thybrid/overlay coul/debye 0.1 40 lj/humm 40\n\n")	
# ^: non bonded interactions are of two types: coul/debye and lj/humm
#    using a screening length of 10A (K=0.1) and a cutoff of 40 A

lammps_f.write("####System definition\n")
lammps_f.write("##############################\n\n")

lammps_f.write("read_data\t%s\n\n" % (args.conffile))
# ^: read the starting configuration and the topology of the system from a data file

lammps_f.write("velocity\tall create %f %d rot yes dist gaussian\n" % (args.temperature,randint(0,1e7)))
# ^: create velocity for ALL atoms at 300K using the given random seed
#    rot yes means that the angular momentum is zeroed
#    dist gaussian means that the velocities are generated with a gaussian distribution (alternative is a uniform distribution)

if args.rigid is not None:
    lammps_f.write("include\t\t%s\n\n" % (args.rigid))

lammps_f.write("fix\t\tlangevinFix all langevin %d %d ${langevinDamping} ${langSeed} zero yes\n" % (args.temperature, args.temperature))
# ^: use a Langevin thermostat with Tstart=args.temp and Tstop=args.temp
#    with a dampingcoefficient langevinDamping and a random seed langSeed
#    zero yes means that the total force is zero

lammps_f.write("fix\t\tnveFix all nve\n\n")
# ^: use an nve time integrator. temperature is controlled by the langevinFix

lammps_f.write("####Force field definition\n")
lammps_f.write("##############################\n\n")

lammps_f.write("include\t%s\n" % (args.pair_coeffs_data))
# ^: input file with the non-bonded interactions definition 

lammps_f.write("dielectric\t80\n")
# ^: dielectric constant of the medium, 80 for water

lammps_f.write("pair_coeff\t* * coul/debye\n")
# ^: use debye-huckel electrostatic interaction for all pairs of particle types

if args.rigid is not None:
    lammps_f.write("delete_bonds\tglob\tmulti\n\n")
# ^: if there are rigid bodies, turn off all the bond calculations of the rigid bodies
#    NOTE that the group with all rigid bodies atoms is called "glob" and should be defined in the $(args.rigid) file

lammps_f.write("#### Energy minimization\n")
lammps_f.write("##############################\n\n")

lammps_f.write("neigh_modify\tevery 1 delay 0 check yes\n")
# ^: during minimization recreate the neighbor list at each step

lammps_f.write("min_style\tsd\n")
# ^: use steepest descent

lammps_f.write("minimize\t0.0 0.0 1000 10000\n\n")
# ^: run the minimization using a tolerance for energy and force of 0 (i.e. run all steps)
#    run for 1000 steps and evaluate force/energy max 10000 times
# THIS PARAMETERS NEED TO BE CHECKED! IT IS JUST A FIRST GUESS MORE OR LESS COPIED FROM THE DOCUMENTATION


    
lammps_f.write("####Simulation settings\n")
lammps_f.write("##############################\n\n")

lammps_f.write("comm_modify\tmode single cutoff 20\n\n")
# ^: for interprocessor communication. use a single cutoff of 20 A

lammps_f.write("timestep\t${dt}\n")
# ^: timestep of 10 fs (as in Dignon et al, PLOS Comp Bio)

lammps_f.write("thermo_style\tmulti\n")
# ^: prints multiple-line listing of thermodynamic info in the log file.
#    this part can be customized (see LAMMPS manual at https://docs.lammps.org/thermo_style.html)

lammps_f.write("thermo\t\t${nstlog}\n")
# ^: stride for the output in the log file in number of steps

lammps_f.write("run_style\tverlet\n\n")
# ^: style of the time integrator. verlet is velocity-verlet

lammps_f.write("####Run simulation\n")
lammps_f.write("##############################\n\n")

lammps_f.write("dump\t\t1 all dcd 10000 ${dumpFile}\n")
# ^: dump command with ID 1. write coordinates of all atoms to a dcd file every 10000 steps

lammps_f.write("dump_modify\t1 unwrap yes\n")
# ^: write coordinates of the dump command with ID 1 and unwrap them

lammps_f.write("run\t\t${nsteps}\n")
# ^: number of steps of the simulation

lammps_f.close()
